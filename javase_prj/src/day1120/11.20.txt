*제어문 : 프로그램의 순차적인 흐름 변경(조건문-if/switch~case/반복문/분기문)
-switch~case 
switch(변수명){
case 상수 : 실행될 코드 ; [break;]
                      ...
default : 상수와 같은 값이 아닐때 실행될 코드;
}
	* 
=>일치하는 수를 찾아 그전까지의 코드를 건너뛰고 그아래로 내려온다.
	* 
=>상수에는 음수도 포함되는데, 변수의 데이터형에 크기와 타입에 따라 달라지게된다. (int로 음수까지 생각했을때 42억여개까지)
	* 
=>수는 섞어사용해도 상관없으나 작은값~큰값순인 오름차순이 보기에 좋다. 아니면 특정수를 뛴다면 (규칙을 가진 증가값) 그것도 좋음
	* 
=>Flow chart는 다중if형태를 띄지 다 같은층을 가진 플로우차트로 그리지 않는다..
	* 
=>break를 만나면 switch를 나감
	* 
ex) 성적에 대한 학점


===>100~90 - A  /  89 ~ 80 - B  /  79 ~ 70 - C  /  69 ~ 60 - D  /  59 ~0 - F

switch (변수명){
caes 100 : garde = 'A'; break;
caes 99: garde = 'A'; break;
caes 98: garde = 'A'; break;
caes 97: garde = 'A'; break;
caes 96: garde = 'A'; break;
...
default : 
 

//바꾸는게 좋겠다 주석만
//바꾸면 내 일..ㅠ
switch (변수명){
caes 100 : 
caes 99: 
caes 98: 
caes 97: 
caes 96: garde = 'A'; break;
...

//정수/정수=정수이므로 변수O
switch (변수명/10){
caes 10 : 
caes 9: garde = 'A'; break;
caes 8: garde = 'B'; break;
caes 7: garde = 'C'; break;
                 ...
default : grade = 'F'; break;
}


*반복문
	* 
<사람이 하기 번거로운걸 하기에 얘만한게 없당
	* 
코드의 실행을 여러번 반복해야 할때
	* 
for, while, do~while (looping문이라고도..)
	* 
<조건을 잘못주엇을때 무한루프 주의=> 인터럭트interuct
	* 
for : 시작과 끝을 알때
	* 
while(do~while) : 시작과 끝을 모를때 (do는 꼭 한번은 실행해서 PL/SQL 의  loop와 동일)
	* 
조건을 잘못 부여하면 무한루프에 빠지게 된다.
	* 
<일부러 주는 경우도 있다 ex)시계, 서버, (가용성,신뢰도 문제)
	* 
반복문을 빠져 나갈때는 분기문인 break를 사용
	* 
반복문의 수행을 건너뛸때에는 분기문인 continue 사용.


-for
	* 
시작과 끝을 알때
	* 
<단일 for, 다중 for를 쓰기도 한다.
	* 
문법) 


          for(초기값; 조건식; 증/감소식) {
                  반복수행 문장;
          }
	* 
{}생략도 가능한데, 반복수행 문장이 1문장이라면 생략가능
	* 

	* 
초기값-조건식-반복수행-증감소식-조건식-반복수행-증감소식-조건식 순서로 반복=> 조건이 맞지않으면 for문 나감
	* 
ex)
	* 
for (int i=0; i<5; i++){
	* 
      System.out.println(i);
	* 
}
	* 
<    =>0부터 5까지 어떻게 가야하지 하는게 for
	* 
<index놀음, 잘관리하기 위해 사용..

